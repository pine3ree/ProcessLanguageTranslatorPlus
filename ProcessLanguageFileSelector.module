<?php

/**
 * ProcessWire Language Translator Process 
 *
 * This module extends the process assigned to the processwire/setup/language-translator/ page.
 *
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 * 
 * customized by Christoph Thelen 2013
 */

class ProcessLanguageFileSelector extends ProcessLanguageTranslator  {

	public static function getModuleInfo() {
		return array(
			'title' => 'Language Translator Select', 
			'summary' => 'Same like Language Translator Modul. You will get a drop-down list to select translatable files instead of text field', 
			'version' => 100, 
			'author' => 'Christoph Thelen',
			'requires' => 'LanguageSupport, ProcessLanguageTranslator',
			); 
	}

	/**
	 * translate filename to json-filename
	 *
	 */
	protected function ___jsonName($file) {
	  $json = str_replace('/', '--', str_replace('.', '-', strtolower($file))).'.json';
	  return $json;
	}
	
	/**
	 * find translatable files, without pendant json-file
	 *
	 */
	protected function ___findTransFiles($dir, $lang_id) {
	global $result;
	$rootpath = $this->config->paths->root;
	$transfilepath = $this->config->paths->assets.'files/';
	   if (false === is_dir($dir)) {
	        return false;
	    }
	     $handle = opendir($dir); 
	     if (false === $handle) {
	        return false;
	    }
	     while (false !== ($file = readdir($handle))) {
	       // Exception of . and ..
	        if ('.' == $file || '..' == $file) {
	            // next Element
	            continue;
	        }
	      // Processing of directories
	      if (is_dir($dir . $file)) {
	            // call function
	            $this->findTransFiles($dir . $file . '/', $lang_id);
	            // next Element
	            continue;
	      }
	      // select only .php .module or .inc
	  		if (false == (strstr($file,'.php') || strstr($file,'.module')  || strstr($file,'.inc'))) {
	        // next Element
	        continue;
	      }
	     	// put to the result array if file contains translatable phrases
	      if($this->parseTranslatableFile($dir.$file)) {
	        $json = $this->jsonName(substr($dir, strlen($rootpath)).$file);
	        //echo LANGPATH.$lang_id.'/'.$json;
	        if(!file_exists($transfilepath.$lang_id.'/'.$json)) {
	        	//$result[] = $json;
	        	$result[substr($dir, strlen($rootpath))][substr($dir, strlen($rootpath)).$file] = $file;
	        }
	      }
	    }
	  closedir($handle);
	  return $result;
	}

	/**
	 * search in wire and site directories for translatable files
	 *
	 */
	protected function ___processSelect() {
		$result = array();
		$dirs = array();
		$dirs[] = $this->config->paths->root.'wire/'; 
		$dirs[] = $this->config->paths->templates;
		$dirs[] = $this->config->paths->siteModules;
		foreach ($dirs as $key=>$dir) {
			$result = $this->findTransFiles($dir ,$this->language->id);
		}
		return $result;
	}

	/**
	 * Add a new class file to translate (creating a new textdomain file)
	 * text inputfield changed to select field by ct 15.10.13
 	 * URL: setup/language-translator/add/
	 *
	 */
	public function ___executeAdd() {
		$files = $this->processSelect();
		$this->addBreadcrumbs();

		$form = $this->modules->get("InputfieldForm"); 
		$form->attr('method', 'post'); 
		$form->attr('action', "./?language_id={$this->language->id}"); 
		$form->description = sprintf("Add new file to translate to %s", $this->language->title);
	
		$field = $this->modules->get("InputfieldSelect");
		$field->attr('name', 'filename');
		$field->label = sprintf(_n('%s File to translate', '%s Files to translate', count($files,COUNT_RECURSIVE)-count($files,0)),count($files,COUNT_RECURSIVE)-count($files,0));
		$field->description = "Select translatable file from the list below.";
		$field->addOptions($files);
		$form->add($field);

		$submit = $this->modules->get("InputfieldSubmit"); 
		$submit->attr('name', 'submit_add'); 
		$submit->attr('value', 'Add File'); 
		$form->add($submit); 

		if($this->input->post->submit_add) $this->processAdd($field);

		return $form->render();
	}
}
